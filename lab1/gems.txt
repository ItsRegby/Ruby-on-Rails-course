#3.1 Сценарій: Необхідно запланувати регулярні фонові завдання, такі як відправлення щотижневих електронних листів або генерація звітів опівночі.

Рішення, який гем ліпше використовувати, залежить в першу чергу від обсягів проєкту.
Частіше всього можна зустріти Sidekiq (має більше наворотів та використовується у великих проєктах) та Resque (для невеликих додатків з невеликою кількістю фонових завдань).
Sidekiq і Resque є популярними інструментами для обробки фонових завдань у Ruby on Rails, але вони відрізняються в архітектурі та продуктивності.
Sidekiq використовує багатопоточність, що дозволяє виконувати кілька завдань одночасно в одному процесі, забезпечуючи вищу ефективність і знижене споживання ресурсів.
Resque, з іншого боку, використовує окремі процеси для кожного завдання, що спрощує ізоляцію помилок, але призводить до більшого навантаження на пам'ять та CPU.

Sidekiq більш продуктивний і підтримує пріоритети черг завдяки потоковій архітектурі, тоді як Resque менш ефективний при обробці великої кількості завдань через використання форкованих процесів.
Обидва інструменти використовують Redis для управління чергами, але через різницю в архітектурі Sidekiq легше справляється з великим обсягом даних і високою пропускною здатністю.
Sidekiq також має розширену екосистему для моніторингу та розкладу завдань, що робить його кращим вибором для великих проєктів, де потрібна висока продуктивність і масштабованість.

Resque підходить для простіших проєктів або випадків, де важлива ізоляція процесів, але це рішення є менш ефективним і потребує більше системних ресурсів.
Для регулярних фонових завдань, таких як відправка електронних листів або генерація звітів, Sidekiq є оптимальним вибором завдяки своїй швидкості та гнучкості.

Відповідь: Sidekiq.

#3.2 Ваш веб-додаток потребує безпечного управління завантаженням файлів, включаючи зображення та документи, і можливо зберігати їх у хмарному сервісі.

Якщо не враховувати Active Storage, що включений у стандартну бібліотеку Rails (з версії 5.2), можна виділити два геми: CarrierWave та Shrine.
CarrierWave є потужним гемом для управління завантаженням файлів у Ruby on Rails. Він простий у використанні та налаштуванні, забезпечує підтримку різних хмарних сервісів,
таких як Amazon S3, і дозволяє легко обробляти зображення. Це хороший вибір, якщо потрібно швидко налаштувати завантаження файлів і не потрібно великої гнучкості у налаштуваннях.

Shrine, з іншого боку, пропонує велику гнучкість і налаштовуваність. Він підтримує плагіни, що дозволяє додавати різні функціональні можливості, такі як обробка зображень,
зберігання метаданих або налаштування обробки файлів. Shrine ідеально підходить для проектів, де є специфічні вимоги до завантаження файлів або обробки,
та коли потрібно мати повний контроль над цим процесом.

Вибір між ними залежить від потреб проєкту: CarrierWave підходить для швидкого та простого використання, тоді як Shrine пропонує більше можливостей для налаштування та гнучкості.

Відповідь: Shrine.

#3.3 Ваш веб-сайт містить розділ з великою кількістю статей, наприклад, блог або новинний портал. З часом кількість статей зросла до сотень або навіть тисяч, і відвідувачам сайту стає важко знайти потрібну інформацію. Вам потрібен ефективний спосіб організувати показ цих статей, щоб користувачі могли легко переглядати їх, не загрузнувши у великій кількості контенту на одній сторінці.

Pagy і Kaminari - це два популярних геми для пагінації в Ruby on Rails, але вони мають різні підходи та особливості.
Pagy є легшим і швидшим за рахунок оптимізації запитів до бази даних і зменшення кількості використаних ресурсів.
Він підтримує різноманітні стилі пагінації, дозволяючи гнучко налаштовувати вигляд і поведінку.
Pagy також надає простіші методи для обробки навігації між сторінками, що може бути корисно для проектів з високими вимогами до продуктивності.

Kaminari, у свою чергу, є більш популярним і має ширшу документацію та спільноту. Він простий у використанні і добре інтегрується з різними фреймворками CSS.
Kaminari також пропонує розширені можливості налаштування пагінації, що дозволяє легше змінювати вигляд компонентів.

Таким чином, якщо потрібна швидкість і продуктивність, краще використовувати Pagy. Якщо важлива зручність налаштування та популярність, то Kaminari буде оптимальним вибором.

Відповідь: Pagy.


